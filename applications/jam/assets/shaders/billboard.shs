#version 450
#state DEPTH_WRITE OFF
#state BLEND TRANSPARENT
generate(vertex, fragment)

#include <stdio.shinc>
#include <utils.shinc>
#include <math_ext.shinc>

variant(depth_only)
{
    #define DEPTH_ONLY
    #state DEPTH_WRITE ON
}

shader(vertex)
{
    uniform bool fixedSize;

    void main(void)
    {
        if(fixedSize)
        {
            gl_Position = FixedSizeBillboardModelToScreenSpacePosition(position);
        }
        else
        {
            gl_Position = BillboardModelToScreenSpacePosition(position);
        }
        PropagateStdIO();
    }
}

shader(fragment)
{
    uniform sampler2D _texture;

    void main(void)
    {
        vec4 color = texture(_texture, stdio(uv));
        if(color.a <= epsilon)
            discard;
        #if defined(DEPTH_ONLY)
            fragment_color = vec4(0.0);
        #else 
            fragment_color = color;
        fragment_normal = vec4(vec3(0.0), 1.0);
        fragment_position = vec4(vec3(0.0), 1.0);
        fragment_overdraw = vec4(vec3(0.0), 1.0);
        #endif
    }
}
